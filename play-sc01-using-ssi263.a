;license:MIT
;(c) 2021 by Tom Charlesworth
;
; play-sc01-using-ssi263:
; . Playback an SC01 phrase using an SSI263 by realtime phoneme mapping
;

; ACME 0.96.4
;
!cpu 6502	; Compatible with all Apple2's
!to "play-sc01-using-ssi263", plain
!sl "play-sc01-using-ssi263.labels"
*=$2000

;------------------------------------------------------------------------------

!source "AppleDefs.a"
!source "MockingboardDefs.a"

;------------------------------------------------------------------------------

ZP_BASE = $f0

MBTimer = $f4
MBTimerL = MBTimer
MBTimerH = MBTimer+1
MBBase2 = $f6		; alias with SSI263Base
MBBase2L = MBBase2
MBBase2H = MBBase2+1
SSI263Base = $f6
SSI263BaseL = SSI263Base
SSI263BaseH = SSI263Base+1
SpeechData = $f8
SpeechDataL = SpeechData
SpeechDataH = SpeechData+1
zpTmp4 = $fa
zpTmp3 = $fb
zpTmpPtr = $fa
zpTmpPtrL = zpTmpPtr
zpTmpPtrH = zpTmpPtr+1
zpTmp2 = $fc
zpTmp1 = $fd
String = $fc		; alias with zpTmp2 & zpTmp1
StringL = String
StringH = String+1
MBBase = $fe		; Mockingboard base
MBBaseL = MBBase
MBBaseH = MBBase+1

;------------------------------------------------------------------------------

!zone code

entrypoint
; Pre: TODO: disable accelerators or set to 1MHz
;

	sei

	ldx		#($ff-ZP_BASE)
-		lda		ZP_BASE,x
		sta		saveZP,x
		dex
		bpl		-

	lda		IRQL
	sta		saveIRQL
	lda		IRQH
	sta		saveIRQH

	;

!cpu 65816
	sed
	lda		#$99
	clc
	adc		#$01
	cld
	bmi		@3
		lda		#1
		clc
		xce		; 65C02:NOP / 65816:exchange carry and emulation flags
		bcc		@1
			xce
			sta		is65816
			bra		@2
@1	sta		is65C02
@2	sta		is65C02or65816
@3
!cpu 6502

	lda		VERSION
	cmp		#VERSION_IIE_OR_HIGHER
	bne		+
		lda		#1
		sta		hasLowerCase
+

	lda		TEXTON
	lda		MIXEDOFF
	lda		PAGE2OFF
	lda		HIRESOFF
	jsr		HOME	; perhaps better to clear to $00? ie. for floating-bus reads in GetSlotInfo()

	jsr		GetSlotInfo
	bne		+
		lda		#<msg_NoMB
		ldx		#>msg_NoMB
		jsr		Print
		jmp		exit

+	lda		#<msg_title
	ldx		#>msg_title
	jsr		Print
	jsr		Display

	lda		#<msg_cpu6502Detected
	ldx		#>msg_cpu6502Detected
	ldy		is65C02or65816
	beq		+
		lda		#<msg_cpu65C02Detected
		ldx		#>msg_cpu65C02Detected
		ldy		is65816
		beq		+
			lda		#<msg_cpu65816Detected
			ldx		#>msg_cpu65816Detected
+	jsr		Print

	lda		#$80+$0d
	jsr		COUT

	lda		#0
	sta		totalTests+0
	sta		totalTests+1

	lda		#7
	sta		slotUnderTest
@nextSlot
		ldx		slotUnderTest
		lda		slotInfo,x
		beq		+
			sta		has6522
			jsr		Check6522		; Basic 6522 checks
			bcc		++
				jsr		PrintTestFailed
				jmp		exit
++			jsr		DetectSubunits	; ie. speech chips
			ldx		slotUnderTest
			jsr		DisplayCardUpdate
			jsr		PlaySpeechPhrase
			;
+		dec		slotUnderTest
		bne		@nextSlot

	;

	lda		#<msg_OK
	ldx		#>msg_OK
	jsr		Print

	;

exit

	lda		saveIRQL
	sta		IRQL
	lda		saveIRQH
	sta		IRQH

	ldx		#($ff-ZP_BASE)
-		lda		saveZP,x
		sta		ZP_BASE,x
		dex
		bpl		-

	rts

;------------------------------------------------------------------------------

PlaySpeechPhrase
; Pre:
; Post:

	lda		hasSC01
	ora		hasSSI263
	bne		+
		rts
+

	jsr		PrintSlotNum

	lda		hasSC01
	beq		+
		lda		#<msg_PressToPlaySC01
		ldx		#>msg_PressToPlaySC01
		jsr		Print

		lda		hasSSI263
		beq		+

		lda		#$80+','
		jsr		COUT
		lda		#$80+' '
		jsr		COUT
+

	lda		hasSSI263
	beq		+
		lda		#<msg_PressToPlaySSI263
		ldx		#>msg_PressToPlaySSI263
		jsr		Print
+

	lda		#<msg_EscToQuit
	ldx		#>msg_EscToQuit
	jsr		Print

-		lda		KBD
		bpl		-
		bit		KBDSTRB
		cmp		#$80+27
		beq		@out

		cmp		#$80+'1'
		bcc		-
		cmp		#$80+'9'+1
		bcc		@sc01

		cmp		#$80+'A'
		bcc		-
		cmp		#$80+'I'+1
		bcs		-

@ssi263
	ldx		hasSSI263
	beq		-
	sec
	sbc		#$80+'A'
	jsr		TestSSI263
	jmp		-

@sc01
	ldx		hasSC01
	beq		-
	sec
	sbc		#$80+'1'
	jsr		TestSC01
	jmp		-

@out
	rts

;

;  0123456789012345678901234567890123456789
; "Slot #x:SC01: 1-9 or ESC"
; "Slot #x:SC01: 1-9, SSI263: A-I or ESC"
; "Slot #x:SSI263: A-I or ESC"

msg_PressToPlaySC01		!text "SC01: 1-9",0
msg_PressToPlaySSI263	!text "SSI263: A-I",0
msg_EscToQuit			!text " or ESC",$d,0

;------------------------------------------------------------------------------

GetSlotInfo
; Scan all slots for 6522s at $Cn00 and $Cn80
; Post: Z=1 (BEQ) if nothing found

	lda		#0
	sta		numMockingboards

	ldx		#7
-		lda		#0
		sta		slotInfo,x
		jsr		Detect6522
		lda		slotInfo,x
		beq		+
			inc		numMockingboards
+		dex
		bne		-

	lda		numMockingboards
	rts

;------------------------------------------------------------------------------

DetectSubunits
; Detect Phasor card, AY8913, SSI263 & SC01
; Pre: zpTmp1 = slotInfo[slot]

	lda		#0
	sta		isPhasorCard			; assume Mockingboard
	sta		hasSSI263				; ... no SSI263's
	sta		hasSC01					; ... no SC01

	lda		#PH_MOCKINGBOARD
	sta		phasorMode

	; Determine if this is a Mockingboard or Phasor card

	lda		zpTmp1
	and		#3
	cmp		#3
	bne		@donePhasor

	lda		#$55
	ldy		#SY6522_DDRB
	sta		(MBBase),y
	asl								; A=$AA
	iny								; SY6522_DDRA
	sta		(MBBase),y

	lda		#PH_PHASOR
	jsr		SetPhasorMode

	; Phasor card in Phasor mode has floating-bus at $Cn00-$Cn0F
	ldy		#SY6522_DDRB
	lda		#$55
	cmp		(MBBase),y
	bne		+
	asl								; A=$AA
	iny								; SY6522_DDRA
	cmp		(MBBase),y
	bne		+
	ldy		#SY6522_TIMER2L_COUNTER
	jsr		SF_GetTimerL
	beq		++
+		inc		isPhasorCard
++	lda		#PH_MOCKINGBOARD
	jsr		SetPhasorMode

@donePhasor

	;

	jsr		DetectSSI263			; pre: zpTmp1
	jmp		DetectSC01				; pre: zpTmp1

;------------------------------------------------------------------------------

SetPhasorMode
; Pre: A=phasorMode

	sta		phasorMode
	lda		MBBaseH
	asl
	asl
	asl
	asl								; slot * 16
	clc
	adc		phasorMode
	tax
	lda		$c080,x
	rts

;------------------------------------------------------------------------------

resetSubTest

	lda		#0
	sta		subTestNum
	rts

;------------------------------------------------------------------------------

incSubTestBy1				; NB. Don't inc totalTests
; Post: Z=1
	inc		subTestNum
	lda		#0
	rts

;

incSubTestNum

	inc		subTestNum
	; fall through...

incTotalTests

	inc		totalTests+0
	bne		+
	inc		totalTests+1
+	rts

;------------------------------------------------------------------------------

;LINE0=$400
LINE1=$480
LINE2=$500
LINE3=$580
LINE4=$600
SLOT1POS = $13					; pos left of '1'

Display
;               1  2  3  4  5  6  7
;          $00: ?     1  S  C  P       ; ?=6522(VIA), 1=Sound-I(or Speech-I), S=Sound/Speech-I, C=MB-C(or MB-A or Sound-II), P=Phasor
;          $80:    ?     S  C  P
;           SP:           VABV B       ; A=SSI263(socket-A), B=SSI263(socket-B), V=Votrax/SC01

	lda		#$80+'$'
	sta		LINE2+$0f
	sta		LINE3+$0f
	lda		#$80+'0'
	sta		LINE2+$10
	sta		LINE2+$11
	sta		LINE3+$11
	lda		#$80+'8'
	sta		LINE3+$10
	lda		#$80+':'
	sta		LINE2+$12
	sta		LINE3+$12
	sta		LINE4+$12
	lda		#$80+'S'
	sta		LINE4+$10
	lda		#$80+'P'
	sta		LINE4+$11

	ldx		#7*3-1
	ldy		#7

-		tya
		ora		#$B0
		sta		LINE1+$12,x		; '1  2  3  4  5  6  7'

		lda		slotInfo,y
		lsr
		pha
		lda		#$80+' '		; C-flag not affected
		bcc		+
		lda		#$80+'?'
+		sta		LINE2+$12,x		; 'V' or ' '

		pla
		lsr
		lda		#$80+' '		; C-flag not affected
		bcc		+
		lda		#$80+'?'
+		sta		LINE3+$12,x		; 'V' or ' '

		dex
		dex
		dex
		dey
		bne		-

	lda		#$80+$0a
	jsr		COUT
	lda		#$80+$0a
	jsr		COUT
	lda		#$80+$0a
	jsr		COUT
	lda		#$80+$0a
	jsr		COUT

	rts

;--------------------------------------

DisplayCardUpdate
; Pre: X=slot#

	;
	; Update cards
	;

	; x = (x-1)*3 + 1 = the position of the slot# (eg. '1')
	dex
	stx		zpTmp1
	txa
	asl
	sec							; sec to do the +1
	adc		zpTmp1
	tax

	lda		has6522
	cmp		#1					; 6522/AY8913 at $00?
	bne		+
		lda		#$80+'1'		; MB-Sound I (has a 6522/AY8913 at $00) or MB-Speech I (has a 6522/SC01) at $00
		sta		LINE2+SLOT1POS,x

+	lda		has6522
	cmp		#2					; 6522/AY8913 at $80?
	bne		+
		lda		hasSC01
		beq		+				; no SC01 - don't know what this is!
		lda		#$80+'S'		; MB-Sound/Speech I has a 6522/SC01 at $00; and a 6522/AY8913 at $80
		sta		LINE3+SLOT1POS,x

+	lda		has6522
	cmp		#3					; 6522/AY8913 at $00 && $80?
	bcc		@speech				; (branch if A < 3)
		lda		isPhasorCard
		beq		@isIIorC
			lda		#$80+'P'
			bne		@out
@isIIorC	lda		#$80+'C'	; MB-C or MB-Sound II (has 2x 6522/AY8913, but no SC01 nor SSI263)
@out:
		sta		LINE2+SLOT1POS,x
		sta		LINE3+SLOT1POS,x

	;
	; Add info about any speech chips
	;

@speech
	lda		hasSC01
	beq		@SSI263
		lda		#$80+'V'
		sta		LINE4+SLOT1POS+1,x

@SSI263
	lda		hasSSI263			; bitmap
	beq		@done
		lsr
		bcc		+
			pha
			lda		#$80+'A'	; $Cn40
			sta		LINE4+SLOT1POS-1,x
			pla
+		lsr
		bcc		+
			lda		#$80+'B'	; $Cn20
			sta		LINE4+SLOT1POS,x
+

@done
	rts

;------------------------------------------------------------------------------

PrintTestFailed		; No error bytes
	jsr		PrintLineTestFailed
	; (next line)
	rts

	;

PrintLineTestFailed
	jsr		PrintSlotNum

	lda		#<msg_TestFailed
	ldx		#>msg_TestFailed
	jsr		Print
	rts

	;

PrintSlotNum
	lda		#<msg_Slot
	ldx		#>msg_Slot
	jsr		Print
	lda		slotUnderTest
	ora		#$80+$30
	jsr		COUT
	lda		#$80+':'
	jmp		COUT

;------------------------------------------------------------------------------

Print
; Pre: A(l),X(h) = msg addr

	sta		StringL
	stx		StringH
	ldy		#0
@loop	lda		(String),y
		beq		+
		ldx		hasLowerCase
		bne		++
			cmp		#'a'
			bcc		++
			cmp		#'z'+1
			bcs		++
			and		#!($20)
++
		ora		#$80	; set high bit
		tax
		tya
		pha
		txa
		jsr		COUT
		pla
		tay
		iny
		bne 	@loop
+	rts

;------------------------------------------------------------------------------

COMPONENT_CARD		= $00
COMPONENT_6522		= $10
COMPONENT_AY8913	= $20
COMPONENT_SC01		= $30
COMPONENT_SSI263	= $40

!source "chip-6522.a"
!source "chip-sc01.a"
!source "chip-ssi263.a"

;------------------------------------------------------------------------------

!zone data

!align 15, 0, 0		; align to 16 bytes (pad with 0's)

saveZP			!fill ($100-ZP_BASE),0
slotInfo		!fill 8,0	; slot[0..7] : bits: 1=6522/$80, 0=6522/$00
numMockingboards	!byte 0

is65C02			!byte 0
is65816			!byte 0
is65C02or65816	!byte 0

slotUnderTest	!byte 0

testComponentNum	!byte COMPONENT_CARD
testNum			!byte 0
subTestNum		!byte 0
totalTests		!byte 0,0

isPhasorCard	!byte 0
phasorMode		!byte PH_MOCKINGBOARD

has6522			!byte 0
hasLowerCase	!byte 0
hasSSI263		!byte 0
hasSC01			!byte 0

isrIFR_A		!byte 0
isrIFR_B		!byte 0
isrIFR			!byte 0
isrFlag			!byte 0
isrError		!byte 0,0
isrCopyA		!byte 0

saveZPTextVars	!fill (BAS2H-CH)+1,0

saveIRQL		!byte 0
saveIRQH		!byte 0

errorExpected	!byte 0
errorActual		!byte 0

hasBeenReset	!byte 0
userlandSP		!byte 0

msg_title	!text "play-sc01-using-ssi263 v0.1, 2021",$d
msg_titleEnd !text 0

msg_cpu6502Detected !text "6502 detected",$d
msg_cpu6502DetectedEnd !text 0
msg_cpu65C02Detected !text "65C02 detected",$d
msg_cpu65C02DetectedEnd !text 0
msg_cpu65816Detected !text "65816 detected",$d
msg_cpu65816DetectedEnd !text 0

msg_NoMB !text "No Mockingboard detected!",$d
msg_NoMBEnd !text 0

msg_Slot !text "Slot #"	; 0
msg_SlotEnd !text 0

msg_TestFailed !text "Mockingboard failed test: 6522 "
msg_TestFailedEnd !text 0

msg_OK !text "Done",$d
msg_OKEnd !text 0
