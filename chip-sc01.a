;license:MIT
;(c) 2021 by Tom Charlesworth
;
; SC01 related
;

;------------------------------------------------------------------------------

DetectSC01
; Pre: zpTmp1 = 6522 bitmap in b1:0
; Post:

	; SC01 is only on SMS's Speech, SMS's Sound/Speech, AppleWin's hybrid MB + MAME's hybrid MB
	; - Speech using 6522 PCR w/o IRQ (based on Crimewave's SC01 code)

	jsr		SetISR_NMI
	lda		#0
	sta		isrNMIcount

	lda		zpTmp1
	and		#1
	beq		+

	lda		#IxR_VOTRAX
	ldy		#SY6522_IER
	sta		(MBBase),y				; disable CB1(Speech) IRQ

	jsr		KickSC01

	lda		#$FF
	jsr		WAIT					; delay for 0x28882 (166018) cycles / ~163ms (and NMI may have occurred)

	ldy		#SY6522_IFR
	lda		#IxR_VOTRAX				; check CB1(Speech) IRQ
	and		(MBBase),y
	beq		+
	sta		(MBBase),y				; clear CB1(Speech) IRQ

		jsr		DisableSC01
		inc		hasSC01

+	lda		isrNMIcount
	sta		isrNMIcount_SC01

	rts

;------------------------------------------------------------------------------

DisableSC01
; NB. Called from userland & ISR

	; https://github.com/a2-4am/4cade:
	; . turn off cb2 pulse mode to disable false writes to sc01 (to fix random MB noise)
	lda		#$00
	ldy		#SY6522_PCR
	sta		(MBBase),y

	rts

;------------------------------------------------------------------------------

KickSC01

	lda		#$B0
	ldy		#SY6522_PCR
	sta		(MBBase),y

	ldy		#SY6522_IFR
	lda		#IxR_VOTRAX
	sta		(MBBase),y				; clear CB1(Speech) IRQ after setting PCR

	ldy		#SY6522_DDRB
	lda		#$FF
	sta		(MBBase),y

	ldy		#SY6522_ORB
	lda		#$3F					; STOP (47ms on average), Inflection=b#00
									; cf. with SSI263 which kicks with DUR=b#11 (ie. shortest duration) & RATE=$A => ~24ms
	sta		(MBBase),y

	rts

;------------------------------------------------------------------------------

PlaySC01
; Pre: X:A = phoneme data

	sta		SpeechDataL
	stx		SpeechDataH

	sei
	inc		doingSpeechSC01

	lda		#0
	sta		irqT1IntCount
	sta		isrFlag

	jsr		KickSC01

	lda		#$ff					; T1C = T1L = $FFFF
	ldy		#SY6522_TIMER1L_COUNTER
	sta		(MBTimer),y
	iny								; SY6522_TIMER1H_COUNTER
	sta		(MBTimer),y				; (and clears IFR.b6)

	lda		#ACR_FREERUNNING
	ldy		#SY6522_ACR
	sta		(MBTimer),y				; Free-running timer

	lda		#IER_SET|IxR_TIMER1|IxR_VOTRAX
	ldy		#SY6522_IER
	sta		(MBTimer),y				; Enable Timer1 IRQ & SC01/Votrax IRQ

	cli

	rts

;------------------------------------------------------------------------------

NUM_PHRASES=7

TestSC01
; Pre: has6522, hasSC01, A=phrase#
; Post: C=0(OK), C=1(NG)
; Uses: zpTmp1

	cmp		#NUM_PHRASES+1
	bcc		+						; A < NUM_PHRASES+1
		rts
+
	sta		zpTmp1

	lda		has6522
	and		#1
	beq		@done

	lda		hasSC01
	beq		@done

	lda		#IER_CLR|IxR_TIMER1|IxR_TIMER2|IxR_VOTRAX
	ldy		#SY6522_IER				; disable IRQ
	sta		(MBBase),y
	ldy		#SY6522_IFR				; clear IRQ flag
	sta		(MBBase),y

	lda		#<TestSC01ISR
	sta		IRQL
	lda		#>TestSC01ISR
	sta		IRQH

	lda		#COMPONENT_SC01+1		; test component $31
	sta		testComponentNum
	lda		#$ff
	sta		testNum					; test #00

	lda		MBBaseH
	sta		MBTimerH
	lda		MBBaseL
	sta		MBTimerL				; NB. MBTimer is used for TIMER1

	; SC01 is only accessed by 6522 at $Cn00

	inc		testNum					; test #00
	jsr		TSC01_0
	bcs		@error

@done
	clc
	rts

@error
; Pre: zpTmp2 = expected value
;	A = actual value
; Post: C=1(NG)

	sta		errorActual
	lda		zpTmp2
	sta		errorExpected

	sec
	rts

;------------------------------------------------------------------------------

TSC01_0
; Pre: zpTmp1 = phrase#
;	MBBaseL = SY6522_A_BASE
; Post: C=0(OK), C=1(NG)
;
; Test#0
; . Play phrase "THE SPY STRIKES BACK" and check total duration is within tolerance

	jsr		resetSubTest			; subTest #0
	jsr		incTotalTests

	lda		zpTmp1
	asl
	tay
	lda		SC01Phrases+1,y
	tax								; X = addr_h
	lda		SC01Phrases+0,y			; A = addr_l
	jsr		PlaySC01

	lda #$ff
	jsr WAIT						; wait: 163ms

	lda		isrFlag
	sec
	beq		@done					; need 1st phoneme IRQ by now

	; TODO: add timeout
-		lda		doingSpeechSC01
		bne		-

	clc

@done
	sei
	php

	ldy		#SY6522_IER
	lda		#IER_CLR|IxR_VOTRAX
	sta		(MBBase),y				; Disable SC01/Votrax IRQ
	lda		#IER_CLR|IxR_TIMER1
	sta		(MBTimer),y				; Disable Timer1 IRQ

	jsr		CalcPhraseDuration

	plp
	rts

;

SC01Phrases
	!word	Spy_TheSpyStrikesBack
	!word	Spy_Ouch
	!word	CW_CrimeWave1
	!word	CW_GameOver
	!word	COM_Help
	!word	COM_CantGoThatWay
	!word	BZ_PitifulOpponent
	!word	0

;------------------------------------------------------------------------------

TestSC01ISR
; Pre:
;	6502 has pushed P
;	Apple ROM has stored A to $45 (not Apple //e ROM!)
;	MBBaseL = SY6522_A_BASE
;	MBTimer (== MBBase)
;	SpeechData
; Post:
;	irqT1IntCount, irqT1H, irqT1H2, irqT1L
;	isrFlag=1 (on SC01 IRQ)
;	SpeechData (incremented)
;

	txa
	pha
	tya
	pha

	;------

	ldy		#SY6522_TIMER1H_COUNTER
	lda		(MBTimer),y
	sta		irqT1H

	; Read IFR.T1 before reading T1C_l (which clears IFR.T1)
	; NB. read IFR.T1 between the 2 reads of T1H, so that irqT1IntCount is consistent with T1H vs T1H2
	; Eg. IFR.T1 could become 1 between reading T1H & T1H2

	ldy		#SY6522_IFR
	lda		(MBTimer),y
	and		#IxR_TIMER1
	tax								; save IFR.T1

	ldy		#SY6522_TIMER1L_COUNTER
	lda		(MBTimer),y				; (reading T1C_l clears IFR.b6)
	sta		irqT1L
	ldy		#SY6522_TIMER1H_COUNTER
	lda		(MBTimer),y
	sta		irqT1H2

	txa								; test IFR.T1
	beq		+

	inc		irqT1IntCount			; Timer1 IRQ
	jmp		@exit

	;

+	ldy		#SY6522_IFR
	lda		#IxR_VOTRAX
	sta		(MBBase),y				; clear all remaining IRQs (ie. Speech)

	lda		#1
	sta		isrFlag

	;------

	lda		#0
	ldy		#4
-		ora		(SpeechData),y
		dey
		bpl		-
	tay								; tst a
	bne		+

	; last phoneme complete, disable SC01 IRQ + disable 6522 T1 IRQ
	sta		doingSpeechSC01			; =0
	jsr		DisableSC01
	lda		#IER_CLR|IxR_TIMER1
	ldy		#SY6522_IER
	sta		(MBTimer),y				; Disable Timer1 IRQ
	jmp		@exit					; NB. don't go via code to set SpeechData+=1

+	ldy		#0
	lda		(SpeechData),y
	sta		(MBBase),y

	; NB. don't reset T1C to $ffff - just let it continue to count down
	; So total speech phrase will be more accurate, but individual phonemes won't be. Maybe use T2 for each phoneme?

	lda		SpeechDataL
	clc
	adc		#1
	sta		SpeechDataL
	bcc		+
	inc		SpeechDataH
+

@exit
	pla
	tay
	pla
	tax

	lda		$45		; for Apple II/II+
	rti

;------------------------------------------------------------------------------

!zone data

doingSpeechSC01		!byte 0

Spy_TheSpyStrikesBack
; Penguin Software's "The Spy Strikes Back"
; NB. For MAME 0.230 inflection (b7:6) changes the pitch, but the overall phrase duration remains constant at 0x15E0D0 cycles (model=applee)
	!byte $03
	!byte $38
	!byte $32
	!byte $03
	!byte $1F
	!byte $25
	!byte $15
	!byte $22
	!byte $03
	!byte $1F
	!byte $2A
	!byte $2B
	!byte $15
	!byte $22
	!byte $19
	!byte $1F
	!byte $03
	!byte $0E
	!byte $2E
	!byte $19
	!byte $03
	!byte $3F
	!byte 0,0,0,0,0

Spy_Ouch
; Penguin Software's "The Spy Strikes Back" - "Ouch!"
; NB. For MAME 0.230 the overall phrase duration is 0x0679D4 cycles (model=applee)
	!byte $03
	!byte $13
	!byte $37
	!byte $2A
	!byte $10
	!byte $03
	!byte $3F
	!byte 0,0,0,0,0

CW_CrimeWave1
; Penguin Software's "Crime Wave" - "Crime wave one"
	!byte $03
	!byte $19
	!byte $2B
	!byte $15
	!byte $22
	!byte $0C
	!byte $03
	!byte $2D
	!byte $20
	!byte $0F
	!byte $03
	!byte $2D
	!byte $32
	!byte $0D
	!byte $3F
	!byte 0,0,0,0,0

CW_GameOver
; Penguin Software's "Crime Wave" - "Game Over"
	!byte $03
	!byte $1C
	!byte $20
	!byte $0C
	!byte $03
	!byte $35
	!byte $37
	!byte $0F
	!byte $3A
	!byte $3F
	!byte 0,0,0,0,0

COM_Help
; Sir Tech's "Crypt of Medea" - "Please consult the hint sheet"
	!byte $3F
	!byte $25
	!byte $18
	!byte $2C
	!byte $12
	!byte $03
	!byte $19
	!byte $3D
	!byte $0D
	!byte $1F
	!byte $33
	!byte $18
	!byte $2A
	!byte $3E
	!byte $38
	!byte $33
	!byte $3E
	!byte $1B
	!byte $27
	!byte $0D
	!byte $2A
	!byte $3E
	!byte $11
	!byte $2C
	!byte $2A
	!byte $3E
	!byte $3E
	!byte $3F
	!byte 0,0,0,0,0

COM_CantGoThatWay
; Sir Tech's "Crypt of Medea" - "You can't go that way"
	!byte $3F
	!byte $29
	!byte $28
	!byte $3E
	!byte $19
	!byte $2E
	!byte $0D
	!byte $2A
	!byte $3E
	!byte $1C
	!byte $26
	!byte $3E
	!byte $38
	!byte $2E
	!byte $2A
	!byte $3E
	!byte $2D
	!byte $01
	!byte $21
	!byte $3E
	!byte $3E
	!byte $3F
	!byte 0,0,0,0,0

BZ_PitifulOpponent
; "Berzap!" - "You were a pitiful opponent"
	!byte $3F
	!byte $22
	!byte $28
	!byte $03
	!byte $03
	!byte $2D
	!byte $2D
	!byte $2B
	!byte $03
	!byte $3F
	!byte $05
	!byte $3E
	!byte $25
	!byte $09
	!byte $2A
	!byte $0A
	!byte $1D
	!byte $32
	!byte $18
	!byte $03
	!byte $3F
	!byte $03
	!byte $08
	!byte $25
	!byte $26
	!byte $0D
	!byte $01
	!byte $0D
	!byte $2A
	!byte $03
	!byte $3F
	!byte 0,0,0,0,0
